// multiplayer.js - Firebase-powered online multiplayer for X³O³
// MVP implementation: lobby creation, join, real-time sync, and move logic

// --- Firebase App Config ---
// (Auto-generated by Firebase Console)
const firebaseConfig = {
  apiKey: "AIzaSyBizrHHSIT8XjHDUY2WxoRDJ4N2_P0QeTU",
  authDomain: "x3o3-aab7d.firebaseapp.com",
  projectId: "x3o3-aab7d",
  storageBucket: "x3o3-aab7d.firebasestorage.app",
  messagingSenderId: "143244235807",
  appId: "1:143244235807:web:fdaadcd7941e9152fe312a",
  measurementId: "G-EKQN1YD930"
};

// --- Firebase Initialization ---
let app, db, auth, user;

async function initFirebase() {
  if (!window.firebase) throw new Error("Firebase SDK not loaded");
  app = firebase.initializeApp(firebaseConfig);
  db = firebase.firestore();
  auth = firebase.auth();
  // Anonymous sign-in
  await auth.signInAnonymously();
  user = auth.currentUser;
  return user;
}

// --- Lobby Code Generation ---
function generateLobbyCode() {
  const chars = 'ABCDEFGHJKLMNPQRSTUVWXYZ23456789';
  let code = '';
  for (let i = 0; i < 6; i++) code += chars.charAt(Math.floor(Math.random() * chars.length));
  return code;
}

// --- Create Lobby ---
async function createLobby(selectedMode) {
  let code, ref, exists;
  try {
    do {
      code = generateLobbyCode();
      ref = db.collection('games').doc(code);
      exists = (await ref.get()).exists;
    } while (exists);
    console.log('Creating lobby with code:', code, 'mode:', selectedMode, 'user:', user && user.uid);
    await ref.set({
      players: { X: user.uid, O: null },
      board: Array(9).fill(""),
      currentTurn: "X",
      status: "waiting",
      mode: selectedMode,
      created: firebase.firestore.FieldValue.serverTimestamp()
    });
    console.log('Lobby created!');
    return code;
  } catch (e) {
    console.error('Error in createLobby:', e);
    throw e;
  }
}

// --- Join Lobby ---
async function joinLobby(code) {
  const ref = db.collection('games').doc(code);
  const snap = await ref.get();
  if (!snap.exists) throw new Error("Lobby not found");
  const data = snap.data();
  if (data.players.O && data.players.O !== user.uid) throw new Error("Lobby full");
  if (!data.players.O) {
    await ref.update({
      'players.O': user.uid,
      status: "in_progress"
    });
  }
  return data;
}

// --- Listen to Game State ---
function listenToGame(code, callback) {
  return db.collection('games').doc(code).onSnapshot(doc => {
    if (doc.exists) callback(doc.data());
  });
}

// --- Make Move ---
async function makeMove(code, idx, value) {
  const ref = db.collection('games').doc(code);
  return db.runTransaction(async tx => {
    const doc = await tx.get(ref);
    if (!doc.exists) throw new Error("Game not found");
    const data = doc.data();
    if (data.status !== "in_progress") throw new Error("Game not active");
    if (data.currentTurn !== value) throw new Error("Not your turn");
    if (data.board[idx]) throw new Error("Cell occupied");
    // Update board
    const newBoard = data.board.slice();
    newBoard[idx] = value;
    // Check for win/draw (client-side for MVP)
    let nextTurn = value === "X" ? "O" : "X";
    let status = "in_progress";
    // (Win/draw logic should be added here for production)
    tx.update(ref, {
      board: newBoard,
      currentTurn: nextTurn,
      status
    });
  });
}

// --- Handle Game Abandonment ---
async function abandonGame(code, playerRole) {
  if (!code) return false;
  
  try {
    const ref = db.collection('games').doc(code);
    const doc = await ref.get();
    
    if (!doc.exists) return false;
    
    await ref.update({
      status: 'abandoned',
      abandonedBy: playerRole,
      lastUpdated: firebase.firestore.FieldValue.serverTimestamp()
    });
    
    return true;
  } catch (error) {
    console.error('Error abandoning game:', error);
    return false;
  }
}

// --- Exported API ---
window.X3O3Multiplayer = {
  initFirebase,
  createLobby,
  joinLobby,
  listenToGame,
  makeMove,
  abandonGame,
  getUser: () => user
};
